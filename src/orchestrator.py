from pathlib import Path

from src.core import obfuscate_file


class Orchestrator:
    def __init__(self, module_path: str, output_dir: str = "dist"):
        self.module_path = Path(module_path)
        self.output_dir = Path(output_dir)

    def create_obfuscation_file(self, file_path: str, output_path: str):
        secure_code = obfuscate_file(file_path)
        runtime_embedded_code = f"""
# This file is auto-generated by pycodeenigma. Do not edit !!!
# Origin: {Path(file_path).name}

from codeenigma import execute_secure_code
execute_secure_code({repr(secure_code)}, globals())
"""
        # Write the obfuscated module
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(runtime_embedded_code)

    def obfuscate_module(self):
        """Obfuscate the entire module."""

        for py_file in self.module_path.glob("**/*.py"):
            print(f"Obfuscating {py_file}")
            # Get relative path for module structure
            rel_path = py_file.relative_to(self.module_path.parent)
            output_path = self.output_dir / rel_path
            output_path.parent.mkdir(parents=True, exist_ok=True)

            self.create_obfuscation_file(py_file, output_path)

        print("Obfuscation complete. Files saved to:", self.output_dir)

